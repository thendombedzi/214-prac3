        -:    0:Source:TacticalCommand.cpp
        -:    1:#include <iostream>
        -:    2:#include "TacticalCommand.h"
        -:    3:
        -:    4:
        3:    5:void TacticalCommand::setStrategy(BattleStrategy* s) 
        -:    6:{
        3:    7:    this->strategy = s;
        3:    8:}
        -:    9:
        3:   10:void TacticalCommand::executeStrategy() 
        -:   11:{
        3:   12:    if (strategy) 
        -:   13:    {
        3:   14:        strategy->engage();
       3*:   15:         for (auto unit : units) {
    #####:   16:                unit->move();
    #####:   17:                unit->attack();
        -:   18:            }
        -:   19:    }
        3:   20:}
        -:   21:
    #####:   22:void TacticalCommand::chooseBestStrategy() 
        -:   23:{
    #####:   24:      TacticalMemento* memento = archives->getTacticalMemento("last_successful");
    #####:   25:        if (memento) {
    #####:   26:            planner->restoreMemento(memento);
    #####:   27:            strategy = planner->getCurrentStrategy();
        -:   28:        } else {
    #####:   29:            setStrategy(new Flanking());
        -:   30:        }
    #####:   31:}
        1:   32:TacticalCommand::~TacticalCommand() 
        -:   33:{
        1:   34:    cout << "Deleting strategy" << endl;
        -:   35:    //delete strategy;
        -:   36:    // delete planner;
        -:   37:    // delete archives;
       1*:   38:     for (LegionUnit* unit : units) {
    #####:   39:        delete unit;
        -:   40:    }
        -:   41:    //strategy = 0;
        1:   42:}
