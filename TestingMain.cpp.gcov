        -:    0:Source:TestingMain.cpp
        -:    1:#include <iostream>
        -:    2:#include <string>
        -:    3:
        -:    4:#include "Ambush.h"
        -:    5:#include "Artillery.h"
        -:    6:#include "BattleStrategy.h"
        -:    7:#include "Cavalry.h"
        -:    8:#include "Flanking.h"
        -:    9:#include "Fortification.h"
        -:   10:#include "Infantry.h"
        -:   11:#include "Legion.h"
        -:   12:#include "LegionFactory.h"
        -:   13:#include "LegionUnit.h"
        -:   14:#include "OpenField_I.h"
        -:   15:#include "OpenField_A.h"
        -:   16:#include "OpenField_C.h"
        -:   17:#include "Riverbank_I.h"
        -:   18:#include "Riverbank_C.h"
        -:   19:#include "Riverbank_A.h"
        -:   20:#include "RiverbankFactory.h"
        -:   21:#include "TacticalMemento.h"
        -:   22:#include "TacticalCommand.h"
        -:   23:#include "TacticalPlanner.h"
        -:   24:#include "UnitComponent.h"
        -:   25:#include "WarArchives.h"
        -:   26:#include "Woodland_I.h"
        -:   27:#include "WoodlandFactory.h"
        -:   28:#include "Woodland_C.h"
        -:   29:#include "Woodland_A.h"
        -:   30:#include "OpenFieldFactory.h"
        -:   31:
        -:   32:
        1:   33:int main(){
        -:   34:
        -:   35:
        -:   36:// Create factories for different terrains
        1:   37:    LegionFactory* riverbankFactory = new RiverbankFactory();
        1:   38:    LegionFactory* woodlandFactory = new WoodlandFactory();
        1:   39:    LegionFactory* openFieldFactory = new OpenFieldFactory();
        -:   40:
        -:   41:    
        -:   42:
        -:   43:    // Create a legion for each terrain
        1:   44:    Legion* riverbankLegion = new Legion();
        1:   45:    Legion* woodlandLegion = new Legion();
        1:   46:    Legion* openFieldLegion = new Legion();
        -:   47:
        -:   48:    // Create units for each terrain
        1:   49:    UnitComponent* riverbankInfantry = riverbankFactory->createInfantry();
        1:   50:    UnitComponent* riverbankCavalry = riverbankFactory->createCavalry();
        1:   51:    UnitComponent* riverbankArtillery = riverbankFactory->createArtillery();
        -:   52:    
        1:   53:    UnitComponent* woodlandInfantry = woodlandFactory->createInfantry();
        1:   54:    UnitComponent* woodlandCavalry = woodlandFactory->createCavalry();
        1:   55:    UnitComponent* woodlandArtillery = woodlandFactory->createArtillery();
        -:   56:
        1:   57:    UnitComponent* openFieldInfantry = openFieldFactory->createInfantry();
        1:   58:    UnitComponent* openFieldCavalry = openFieldFactory->createCavalry();
        1:   59:    UnitComponent* openFieldArtillery = openFieldFactory->createArtillery();
        -:   60:   
        -:   61:    // Test 1
        1:   62:    std::cout<<"**********************************\n";
        -:   63:    // Add units to legions
        1:   64:    riverbankLegion->add(riverbankInfantry);
        1:   65:    riverbankLegion->add(riverbankCavalry);
        1:   66:    riverbankLegion->add(riverbankArtillery);
        -:   67:
        1:   68:    woodlandLegion->add(woodlandInfantry);
        1:   69:    woodlandLegion->add(woodlandCavalry);
        1:   70:    woodlandLegion->add(woodlandArtillery);
        -:   71:
        1:   72:    openFieldLegion->add(openFieldInfantry);
        1:   73:    openFieldLegion->add(openFieldCavalry);
        1:   74:    openFieldLegion->add(openFieldArtillery);
        -:   75:
        1:   76:    std::cout<<"**********************************\n";
        -:   77:
        -:   78:   //testing
        1:   79:    riverbankArtillery->move();
        1:   80:    riverbankCavalry->move();
        1:   81:    riverbankInfantry->move();
        -:   82:
        1:   83:    woodlandArtillery->move();
        1:   84:    woodlandCavalry->move();
        1:   85:    woodlandInfantry->move();
        -:   86:
        1:   87:    openFieldArtillery->move();
        1:   88:    openFieldCavalry->move();
        1:   89:    openFieldInfantry->move();
        -:   90:
        1:   91:     riverbankArtillery->fight();
        1:   92:    riverbankCavalry->fight();
        1:   93:    riverbankInfantry->fight();
        -:   94:
        1:   95:    woodlandArtillery->fight();
        1:   96:    woodlandCavalry->fight();
        1:   97:    woodlandInfantry->fight();
        -:   98:
        1:   99:    openFieldArtillery->fight();
        1:  100:    openFieldCavalry->fight();
        1:  101:    openFieldInfantry->fight();
        -:  102:
        -:  103:
        -:  104:    // Test 2
        1:  105:    std::cout<<"**********************************\n";
        -:  106:   // Create and set up strategies
        1:  107:    TacticalCommand* tacticalCommand = new TacticalCommand();
        -:  108:
        1:  109:    BattleStrategy* flankingStrategy = new Flanking();
        1:  110:    BattleStrategy* fortificationStrategy = new Fortification();
        1:  111:    BattleStrategy* ambushStrategy = new Ambush();
        -:  112:
        1:  113:    TacticalPlanner* planner = new TacticalPlanner();
        1:  114:    WarArchives* archives = new WarArchives();
        -:  115:
        1:  116:    std::cout<<"**********************************\n";
        -:  117:
        -:  118:
        -:  119:
        -:  120:     //test Memento
        1:  121:    std::cout<<"**********************************\n";
        1:  122:    std::cout<<"Testing Memento:\n";
        -:  123:    // Save current strategies
        1:  124:    TacticalMemento* flankingMemento = planner->createMemento();
        1:  125:    flankingMemento->storeStrategy(flankingStrategy);
        -:  126:
        1:  127:    TacticalMemento* fortificationMemento = planner->createMemento();
        1:  128:   fortificationMemento->storeStrategy(fortificationStrategy);
        -:  129:
        1:  130:    TacticalMemento* ambushMemento = planner->createMemento();
        1:  131:    ambushMemento->storeStrategy(ambushStrategy);
        -:  132:
        1:  133:    archives->addTacticalMemento(flankingMemento, "Flanking");
        1:  134:    archives->addTacticalMemento(fortificationMemento, "Fortification");
        1:  135:    archives->addTacticalMemento(ambushMemento, "Ambush");
        -:  136:    
        1:  137:    std::cout<<"**********************************\n";
        -:  138:    // 
        -:  139:
        -:  140:
        -:  141:
        -:  142:    // Test 3
        1:  143:    std::cout<<"**********************************\n";
        -:  144:   // Set and execute different strategies
        1:  145:    tacticalCommand->setStrategy(flankingStrategy);
        1:  146:    tacticalCommand->executeStrategy();
        -:  147:
        1:  148:    tacticalCommand->setStrategy(fortificationStrategy);
        1:  149:    tacticalCommand->executeStrategy();
        -:  150:
        1:  151:    tacticalCommand->setStrategy(ambushStrategy);
        1:  152:    tacticalCommand->executeStrategy();
        -:  153:
        -:  154:    // Use mementos to restore and choose strategies
        1:  155:    BattleStrategy* restoredStrategy = archives->getTacticalMemento("Flanking")->getStoredStrategy();
        1:  156:    if (restoredStrategy) {
        1:  157:        cout << "123456789123456789123456789" << endl ;
        1:  158:        tacticalCommand->setStrategy(restoredStrategy);
        1:  159:        tacticalCommand->executeStrategy();
        -:  160:    } else {
    #####:  161:        std::cerr << "Error: Restored strategy is invalid!" << std::endl;
        -:  162:    }
        -:  163:    // planner->restoreMemento(archives->getTacticalMemento("Ambush"));
        -:  164:    // tacticalCommand->setStrategy(ambushStrategy);
        -:  165:    // tacticalCommand->executeStrategy();
        -:  166:
        1:  167:   std::cout<<"**********************************\n";
        -:  168:
        -:  169:
        -:  170://delete units
        1:  171:    delete riverbankFactory;
        1:  172:    delete woodlandFactory;
        1:  173:    delete openFieldFactory;
        1:  174:    delete riverbankLegion;
        1:  175:    delete woodlandLegion;
        1:  176:    delete openFieldLegion;
        1:  177:    delete ambushMemento;
        1:  178:    delete fortificationMemento;
        1:  179:    delete flankingMemento;
        -:  180:    
        1:  181:    delete flankingStrategy;
        1:  182:    delete fortificationStrategy;
        1:  183:    delete ambushStrategy;
        1:  184:    delete planner;
        1:  185:     delete archives;
        1:  186:    delete tacticalCommand;
        -:  187:    
        -:  188:
        -:  189:    
        -:  190:
        -:  191:    
        -:  192:    //example 2:
        -:  193:
        1:  194:    LegionFactory** factories = new LegionFactory*[3];
        1:  195:    factories[0] = new WoodlandFactory();
        1:  196:    factories[1] = new RiverbankFactory();
        1:  197:    factories[2] = new OpenFieldFactory();
        -:  198:
        -:  199:    // Create an array of LegionUnit pointers to hold various military units
        -:  200:    LegionUnit* units[9];
        -:  201:
        -:  202:
        -:  203:
        -:  204:    // Create units using the WoodlandFactory
       1*:  205:    units[0] = factories[0]->createInfantry();   
       1*:  206:    units[1] = factories[0]->createCavalry();
       1*:  207:    units[2] = factories[0]->createArtillery();
        -:  208:
        -:  209:    // Create units using the RiverbankFactory
       1*:  210:    units[3] = factories[1]->createInfantry();   
       1*:  211:    units[4] = factories[1]->createCavalry();
       1*:  212:    units[5] = factories[1]->createArtillery();
        -:  213:
        -:  214:    // Create units using the OpenFieldFactory
       1*:  215:    units[6] = factories[2]->createInfantry();   
       1*:  216:    units[7] = factories[2]->createCavalry();
       1*:  217:    units[8] = factories[2]->createArtillery();
        -:  218:
        -:  219:    // Perform actions with each unit
       10:  220:    for (int i = 0; i < 9; i++) {
        9:  221:        units[i]->move();
        9:  222:        units[i]->attack();
        -:  223:    }
        -:  224:
        -:  225:    
        -:  226:
        -:  227:    // Clean up memory
       10:  228:    for (int i = 0; i < 9; i++) {
        9:  229:        delete units[i];
        -:  230:    }
        -:  231:
        4:  232:    for (int i = 0; i < 3; i++) {
        3:  233:        delete factories[i];
        -:  234:    }
        1:  235:    delete[] factories;
        -:  236:
        1:  237:    cout << "Creating Units of Infantry to test Composite pattern :" << endl ;
        -:  238:    
        1:  239:    OpenFieldFactory* newOpenFieldFactory = new OpenFieldFactory();
        1:  240:    RiverbankFactory* newRiverBankFactory = new RiverbankFactory();
        1:  241:    WoodlandFactory* newWoodlandFactory = new WoodlandFactory();
        -:  242:
        -:  243:    Infantry* newInfantry[5];
        -:  244:    Cavalry* newCavalry[5];
        -:  245:    Artillery* newArtillery[5];
        -:  246:
        1:  247:    Legion newLegion;
        6:  248:    for(int i = 0 ; i < 5 ; i++){
        5:  249:        newInfantry[i] = newOpenFieldFactory->createInfantry();
        5:  250:        newCavalry[i] = newOpenFieldFactory->createCavalry();
        5:  251:        newArtillery[i] = newOpenFieldFactory->createArtillery();
        -:  252:
        5:  253:        newInfantry[i]->add(newInfantry[i]);
        5:  254:        newCavalry[i]->add(newCavalry[i]);
        5:  255:        newArtillery[i]->add(newArtillery[i]);
        -:  256:
        5:  257:        newCavalry[i]->remove(newCavalry[i]);
        5:  258:        newInfantry[i]->remove(newInfantry[i]);
        5:  259:        newArtillery[i]->remove(newArtillery[i]);
        -:  260:
        5:  261:        newLegion.add(newInfantry[i]);
        5:  262:        newLegion.add(newCavalry[i]);
        5:  263:        newLegion.add(newArtillery[i]);
        -:  264:    }
        -:  265:
        1:  266:    newLegion.fight();
        1:  267:    newLegion.move();
        1:  268:    cout << "Legion size before remove : " ;
        1:  269:    cout << newLegion.getSize() << endl;
        1:  270:    newLegion.remove(newInfantry[0]);
        1:  271:    cout << "Legion size after remove : " 
        1:  272:    << newLegion.getSize() << endl ; 
        -:  273:
        -:  274:   
        1:  275:    cout << "Testing the deploy strategies : ";
        -:  276:
        1:  277:    newOpenFieldFactory->deployArtillery();
        1:  278:    newRiverBankFactory->deployArtillery();
        1:  279:    newWoodlandFactory->deployArtillery();
        -:  280:
        1:  281:    delete newRiverBankFactory ;
        1:  282:    delete newOpenFieldFactory ;
        1:  283:    delete newWoodlandFactory ;
        -:  284:
        -:  285:    
        -:  286:    
        1:  287:    return 0;
        1:  288:}
        -:  289:
